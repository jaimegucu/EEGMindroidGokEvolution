package com.app.eeg_mindroid;

import java.util.List;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

// En esta clase estan todos los datos que se repiten entre los menus
public class EEG_MenuVistaComun extends Activity {
	// Son protected para que puedan ser llamados desde las clases que heredan
	protected VerticalProgressBar progressBarConcentracion;
	protected VerticalProgressBar progressBarSeleccion;
	protected ImageView imagenCalidadConexion;
	protected ImageView imagenBateria;
	protected ImageView imagenMindClock;
	protected TextView textoPorcentajeBateria;
	protected TextView textoSegundosSeleccion;
	
	// PREFERENCIAS FUTURAS
	protected int SEGUNDOS_SELECCION = 10;
	protected int contadorSegundosSeleccion = SEGUNDOS_SELECCION;
	protected int indiceBotonSeleccionado = 0;
	
	// Indices de las barras de concentracion y seleccion
	protected int nivelBarraConcentracion = 0;
	protected int nivelBarraSeleccion = 0;
	// Nivel de señal (200 = desconectado)
	protected int nivelSeñalConexion = 200;
	
	// Lista de los botones de cada pantalla
	protected List<Button> listaBotones;
	
	// Inicio aplicacion nueva. Es para que al pasar de un menu a otro NO seleccione el primer boton en el onPause()
	protected boolean aplicacionIniciada = false;
	
	// Resultado de las acciones a realizar. En -1 es NO realizar nada y cuando tome un valor sera el indice de la 
	// lista de botones de la pantalla
	protected int resultadoAccion = -1;
	
	// Creamos un BroadcastReceiver que nos avise cuando cambia el % de la bateria
	protected BroadcastReceiver porcentajeBateriaReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context arg0, Intent intent) {
			// TODO Auto-generated method stub
			int level = intent.getIntExtra("level", 0);
			// Hago esto para escribirlo bien sin mover el icono de la bateria
			if (level == 100) {
				calculaImagenBateria(level);
				textoPorcentajeBateria.setText(String.valueOf(level) + "%");
			} else if (level >= 10) {				
				calculaImagenBateria(level);
				textoPorcentajeBateria.setText("  " + String.valueOf(level) + "%");
			} else {
				calculaImagenBateria(level);
				textoPorcentajeBateria.setText("    " + String.valueOf(level) + "%");
			}
		}
	};
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		progressBarConcentracion = (VerticalProgressBar) findViewById(R.id.progressbarConcentracion);
		progressBarSeleccion = (VerticalProgressBar) findViewById(R.id.progressbarSeleccion);
		imagenCalidadConexion = (ImageView) findViewById(R.id.imagenCalidadConexion);
		imagenBateria = (ImageView) findViewById(R.id.imagenPorcentajeBateria);
		imagenMindClock = (ImageView) findViewById(R.id.imagenMindClock);
		textoPorcentajeBateria = (TextView) findViewById(R.id.textoPorcentajeBateria);
		textoSegundosSeleccion = (TextView) findViewById(R.id.textoSegundosSeleccion);
		
		progressBarConcentracion.setProgress(0);
		progressBarSeleccion.setProgress(0);
		
		textoSegundosSeleccion.setText("10s");
	}
	
	@Override
    public void onResume() {
    	super.onResume();
    	// Iniciamos la conexion bluetooth
    	//AmarinoListenerConexionBT.onResume(this, this);
    	// Registramos el Receiver del porcentaje de bateria
        this.registerReceiver(this.porcentajeBateriaReceiver, 
        	    new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
    }
    
	@Override
	protected void onPause() {
		super.onPause();
		// Finalizamos la conexion bluetooth
		//AmarinoListenerConexionBT.onPause(this, this);
		// Desregistramos el Receiver del porcentaje de bateria
		this.unregisterReceiver(porcentajeBateriaReceiver);
	}
	
	private void calculaImagenBateria(int level) {
		if(level <= 100 && level >= 92) {
			imagenBateria.setImageResource(R.drawable.bateria100_92);
		} else if(level >= 84 && level <= 91) {
			imagenBateria.setImageResource(R.drawable.bateria91_84);
		} else if(level >= 76 && level <= 83) {
			imagenBateria.setImageResource(R.drawable.bateria83_76);
		} else if(level >= 68 && level <= 75) {
			imagenBateria.setImageResource(R.drawable.bateria75_68);
		} else if(level >= 60 && level <= 67) {
			imagenBateria.setImageResource(R.drawable.bateria67_60);
		} else if(level >= 52 && level <= 59) {
			imagenBateria.setImageResource(R.drawable.bateria59_52);
		} else if(level >= 44 && level <= 51) {
			imagenBateria.setImageResource(R.drawable.bateria51_44);
		} else if(level >= 36 && level <= 43) {
			imagenBateria.setImageResource(R.drawable.bateria43_36);
		} else if(level >= 29 && level <= 35) {
			imagenBateria.setImageResource(R.drawable.bateria35_29);
		} else if(level >= 22 && level <= 28) {
			imagenBateria.setImageResource(R.drawable.bateria28_22);
		} else if(level >= 14 && level <= 21) {
			imagenBateria.setImageResource(R.drawable.bateria21_14);
		} else if(level >= 7 && level <= 13) {
			imagenBateria.setImageResource(R.drawable.bateria13_7);
		} else {
			imagenBateria.setImageResource(R.drawable.bateria6_0);
		}
	}
	
	// Este metodo va aqui porque cada menu tendra sus propios botones
    protected int seleccionBoton() {
    	int resultado = -1;
    	
    	// Si la señal de conexion es 0 (señal correcta) que haga su funcion
    	if(nivelSeñalConexion == 0) {
    		if(nivelBarraConcentracion >= 50) {
        		if(nivelBarraSeleccion == 0) {
        			nivelBarraSeleccion = 25;
        			progressBarSeleccion.setProgress(nivelBarraSeleccion);
        		} else if(nivelBarraSeleccion == 25) {
        			nivelBarraSeleccion = 50;
        			progressBarSeleccion.setProgress(nivelBarraSeleccion);
        			
        		} else if(nivelBarraSeleccion == 50){
        			nivelBarraSeleccion = 75;
        			progressBarSeleccion.setProgress(nivelBarraSeleccion);
        		} else {
        			nivelBarraSeleccion = 100;
        			progressBarSeleccion.setProgress(nivelBarraSeleccion);
        			// Hago una pausa para que se vea la barra en  azul un tiempo antes de ir a la seleccion
        			try {
    					Thread.sleep(500);
    				} catch (InterruptedException e) {
    					e.printStackTrace();
    				}
        			
        			// Dejo el nivel de la barra de seleccion a 0 justo antes de entrar en otra opcion
        			nivelBarraSeleccion = 0;
        			
        			// Ponemos en true esto para que NO pinte la aplicacion
        			aplicacionIniciada = true;
        			
        			// Asignamos al resultado el indice del boton seleccionado
        			resultado = indiceBotonSeleccionado;
        		}
        	} else {
        		// Si el nivel de concentracion es < 50, la barra de seleccion bajara tambien
        		if(nivelBarraSeleccion == 75)
        			nivelBarraSeleccion = 50;
        		else if(nivelBarraSeleccion == 50)
        			nivelBarraSeleccion = 25;
        		else if(nivelBarraSeleccion == 25)
        			nivelBarraSeleccion = 0;
        		else
        			nivelBarraSeleccion = 0;
        		
        		progressBarSeleccion.setProgress(nivelBarraSeleccion);
        		
        		// Mientras el contador NO sea cero, dejamos marcado el boton
        		if(contadorSegundosSeleccion != 0) {
        			listaBotones.get(indiceBotonSeleccionado).setPressed(true);
        			contadorSegundosSeleccion--;
        		} else {
        			// Reiniciamos contador de segundos
        			contadorSegundosSeleccion = SEGUNDOS_SELECCION;
        			// Ponemos en false la antigua seleccion
        			listaBotones.get(indiceBotonSeleccionado).setPressed(false);
        			indiceBotonSeleccionado++;
        			
        			// Si llegamos al final de la lista, volvemos al inicio
        			if(indiceBotonSeleccionado == listaBotones.size())
        				indiceBotonSeleccionado = 0;
        			
        			// Ponemos en true la nueva seleccion
        			listaBotones.get(indiceBotonSeleccionado).setPressed(true);
        		}
        	}
    		
    		textoSegundosSeleccion.setText(contadorSegundosSeleccion + "s");
    	}
    	
    	return resultado;
	}
}
